#!/bin/bash

set -euo pipefail

source 'json.bash'

process() {
	notify="$1"
	# parse out the payload
	if [ -n "${POST:-}" ] \
	&& [ -n "${POST[payload]}" ]; then
		JSON.load "${POST[payload]}" payload
	else
		JSON.load "$ENV_Postdata" payload
	fi

	local url="$(JSON.get -s /repository/url payload)"

	if [[ "${url:0:28}" != "https://github.com/brimstone" ]] \
	&& [[ "${url:0:23}" != "http://10.42.99.2:3000/" ]] \
	&& [[ "${url:0:24}" != "https://the.narro.ws/git" ]]; then
		echo "not a valid url: $url"
		return
	fi
	local name="$(JSON.get -s /repository/name payload)"
	echo "$(date) Processing request for $name"
	# figure out our directory
	dir="$(basename "$url")"
	(
	echo "Commit $(JSON.get -s /commits/0/id payload) by $(JSON.get -s /commits/0/author/name payload) $(JSON.get -s /commits/0/author/email payload)"
	echo "\"$(JSON.get -s /commits/0/message payload)\""
	echo
	# clone the repo
	echo "Cloning $url"
	git clone "$url"
	cd "$dir"
	if [ -e ".gitmodules" ]; then
		git submodule update --recursive --init
	fi
	if [ -e "build" ]; then
		echo "Running build script"
		echo
		./build
		ret=$?
	elif [ -e "Makefile" ]; then
		echo "Running make"
		echo
		make
		ret=$?
		if [ $ret == 0 ] && grep -q "^test:" Makefile; then
			make test
			ret=$?
		fi
	fi
	cd ..
	rm -rf "$dir"
	echo "Exit code: $ret"
	[ "$ret" != 0 ] && exit $ret
	exit 0
	) 2>&1 3>&2 | (
		while read aline; do
			if [ -z "$aline" ]; then
				echo
			else
				echo "$(date) $aline"
			fi
		done
	) > $dir.log
	ret=${PIPESTATUS[0]}
	userrepo=${url##https://github.com/}
	case "$notify" in
	issue)
		# check for a current broken build issue
		issueid=$(ghi list -- $userrepo | awk '/Build/ { print $1 }')
		if [ $ret == 0 ]; then
			# build was clean
			echo "Build was clean"
			# if we're currently broken
			# close our current issue id
			if [ -n "$issueid" ]; then
				ghi close $issueid -m "$(< $dir.log)" -- $userrepo
			fi
		else
			# build broke
			echo "build broke"
			# if we don't have a current issue
			if [ -z "$issueid" ]; then
			# open one
			ghi open -m "Build FAILED
	$(< $dir.log)" -- $userrepo
			else
				ghi comment -m "$(< $dir.log)" $issueid -- $userrepo
			fi
		fi
	;;
	email)
		if [ $ret == 0 ]; then
			mail -s "Build of $name PASSED" brimstone@the.narro.ws < $dir.log
		else
			mail -s "Build of $name FAILED" brimstone@the.narro.ws < $dir.log
		fi
	;;
	esac
	cat $dir.log
	rm $dir.log
}

trap 'kill $COPROC_PID;exit' INT

while true; do
	# Default our content-type
	export ENV_Content_Type=""
	# listen on a port, mapping file handles to the $COPROC array
	coproc nc -lp 8081 2>/dev/null
	# first read our verb, url and http version
	read -u "${COPROC[0]}" ENV_verb ENV_url ENV_http
	# trim the \r
	# TODO make this not fail when nc gets the SIGTERM
	ENV_http="${ENV_http:0:$[ ${#ENV_http} - 1 ]}"
	# now read all of the headers from the stdout of coproc
	while read -u "${COPROC[0]}" aline; do
		# trim the \r
		aline="${aline:0:$[ ${#aline} - 1 ]}"
		# if we're at the end of our headers, and our input is a blank line
		if [ -z "${aline}" ]; then
			# wait! if our verb is POST, then we need to also read some more data from the client
			if [ "$ENV_verb" = "POST" ]; then
				read -n "$(( $ENV_Content_Length - 1))" -u "${COPROC[0]}" POSTDATA
				if [ "$ENV_Content_Type" = "application/x-form-multipart" ]; then # TODO get the right mime-type
					# split on the & first
					declare -A POST
					for d in $(echo "$POSTDATA" | tr '&' '\n'); do
						# then split on the =
						key="${d%%=*}"
						# then decode everything
						POST[$key]="$(echo -e "$(echo "${d#*=}" | sed -E 's/\+/ /g;s/%([0-9A-F]{2})/\\x\1/g')")"
					done
				else
					export ENV_Postdata="$POSTDATA"
				fi
			fi
			# right now, just echo out our variables and bail
			break
		fi
		# split up the header line and set environment variables accordingly
		key="${aline%%: *}"
		eval export "ENV_${key//-/_}"="\"${aline#*: }\""
	done

	if [ "$ENV_url" == "/email" ]; then
		notify="email"
	else
		notify="issue"
	fi
	process "$notify"
cat <<DOG >&${COPROC[1]}
HTTP/1.1 200 OK
Content-Type: text/plain

Thanks
DOG
	# we're done with what the user gave us, so kill the socket
	kill "$COPROC_PID"
	# wait to make sure the socket is dead before starting it back again
	wait "$COPROC_PID" || true

done
