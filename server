#!/bin/bash

process() {
	# parse out the payload
	eval $(echo "${POST[payload]}" | ./json_bash payload)
	echo "$(date) Processing request for $payload_repository_name"
	(
	echo "Commit $payload_after by $payload_head_commit_author_name ($payload_head_commit_author_username) $payload_head_commit_author_email"
	echo "\"$payload_head_commit_message\""
	echo
	# clone the repo
	echo "cloning $payload_repository_url"
	git clone "$payload_repository_url"
	echo
	# figure out our directory
	dir="$(basename "$payload_repository_url")"
	# spit it out to the screen
	echo "Directory: $dir"
	cd "$dir"
	if [ -e ".gitmodules" ]; then
		git submodule update --recursive --init
	fi
	if [ -e "$dir/build" ]; then
		echo "$(date) running build script"
		echo
		./build
		echo "Exit code: $?"
	fi
	cd ..
	echo "cleaning up $dir"
	rm -rf "$dir"
	) 2>&1 3>&2 | (
		while read aline; do
			if [ -z "$aline" ]; then
				echo
			else
				echo "$(date) $aline"
			fi
		done
	) | mail -s "Build test of $payload_repository_name" brimstone@the.narro.ws &
}

while true; do
	# listen on a port, mapping file handles to the $COPROC array
	coproc nc -lp 8081 2>/dev/null
	# first read our verb, url and http version
	read -u "${COPROC[0]}" ENV_verb ENV_url ENV_http
	# trim the \r
	# TODO make this not fail when nc gets the SIGTERM
	ENV_http="${ENV_http:0:$[ ${#ENV_http} - 1 ]}"
	# now read all of the headers from the stdout of coproc
	while read -u "${COPROC[0]}" aline; do
		# trim the \r
		aline="${aline:0:$[ ${#aline} - 1 ]}"
		# if we're at the end of our headers, and our input is a blank line
		if [ -z "${aline}" ]; then
			# wait! if our verb is POST, then we need to also read some more data from the client
			if [ "$ENV_verb" = "POST" ]; then
				read -n "$ENV_Content_Length" -u "${COPROC[0]}" POSTDATA
				# split on the & first
				declare -A POST
				for d in $(echo "$POSTDATA" | tr '&' '\n'); do
					# then split on the =
					key="${d%%=*}"
					# then decode everything
					POST[$key]="$(echo -e "$(echo "${d#*=}" | sed -E 's/\+/ /g;s/%([0-9A-F]{2})/\\x\1/g')")"
				done
			fi
			# right now, just echo out our variables and bail
			break
		fi
		# split up the header line and set environment variables accordingly
		key="${aline%%: *}"
		eval export "ENV_${key//-/_}"="\"${aline#*: }\""
	done
	
	process

	# we're done with what the user gave us, so kill the socket
	kill "$COPROC_PID"
	# wait to make sure the socket is dead before starting it back again
	wait "$COPROC_PID"
done
